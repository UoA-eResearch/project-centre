package nz.ac.auckland.eresearch.projectcentre.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import nz.ac.auckland.eresearch.projectcentre.service.KpiService;
import nz.ac.auckland.eresearch.projectcentre.types.api.KpiGET;
import nz.ac.auckland.eresearch.projectcentre.types.api.KpiPOST;
import nz.ac.auckland.eresearch.projectcentre.types.api.KpiPUT;
import nz.ac.auckland.eresearch.projectcentre.types.convert.TypeConversionUtil;
import nz.ac.auckland.eresearch.projectcentre.types.entity.Kpi;
import nz.ac.auckland.eresearch.projectcentre.util.LocationUtil;

import org.apache.commons.beanutils.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Api(tags={"Kpi"}, description="Operations on KPIs")
@RequestMapping(value = "/api/kpi")
public class KpiController {

  @Autowired
  private KpiService kpiService;
  @Autowired
  private TypeConversionUtil typeConversionUtil;
  @Autowired
  private LocationUtil locationUtil;
  
  @ApiOperation(tags={"Project"}, value = "get list of KPIs.")
  @RequestMapping(method = RequestMethod.GET)
  public @ResponseBody ResponseEntity<List<KpiGET>> getAll() throws Exception {
    List<KpiGET> kpisOut = new LinkedList<KpiGET>();
    for (Kpi k : kpiService.findAll()) {
      kpisOut.add(typeConversionUtil.createKpiGET(k));
    }
    return new ResponseEntity<List<KpiGET>>(kpisOut, HttpStatus.OK);
  }

  // TODO: Transaction
  @ApiOperation(value = "create new KPI.")
  @RequestMapping(method = RequestMethod.POST)
  public @ResponseBody ResponseEntity<Void> post(@RequestBody KpiPOST newKpi,
      HttpServletRequest request) throws Exception {
    // TODO: validate
    Kpi p = typeConversionUtil.createKpi(newKpi);
    Integer kpiId = this.kpiService.create(p).getId();
    HttpHeaders headers = new HttpHeaders();
    headers.setLocation(locationUtil.createLocation(request, kpiId));
    return new ResponseEntity<Void>(headers, HttpStatus.CREATED);
  }

  @ApiOperation(value = "get existing KPI.")
  @RequestMapping(value = "/{id}", method = RequestMethod.GET)
  public @ResponseBody ResponseEntity<KpiGET> get(@PathVariable Integer id) throws Exception {
    Kpi kpi = kpiService.findOne(id);
    if (kpi == null) {
      return new ResponseEntity(HttpStatus.NOT_FOUND);
    } 
    return new ResponseEntity(typeConversionUtil.createKpiGET(kpi), HttpStatus.OK);
  }

  @ApiOperation(value = "patch existing KPI. same fields like in PUT can be updated.")
  @RequestMapping(value = "/{id}", method = RequestMethod.PATCH)
  public @ResponseBody ResponseEntity<?> patch(@PathVariable Integer id,
      @RequestBody HashMap<String, Object> parameterMap) throws Exception {
    // potentially cached, so overwrite in new instance
    Kpi oldK = this.kpiService.findOne(id);
    if (oldK != null) {
      KpiPUT newKp = typeConversionUtil.createKpiPUT(oldK);
      BeanUtils.populate(newKp, parameterMap);
      Kpi newK = typeConversionUtil.createKpi(newKp, id);
      // TODO: validate patched KPI
      this.kpiService.update(newK);
      return new ResponseEntity<Void>(HttpStatus.OK);
    }
    return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
  }

  @ApiOperation(value = "update existing KPI.")
  @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
  public @ResponseBody ResponseEntity<?> put(@PathVariable Integer id,
      @RequestBody KpiPUT kpiUpdate) throws Exception {
    // potentially cached, so overwrite in new instance
    if (null != this.kpiService.findOne(id)) {
      Kpi newK = typeConversionUtil.createKpi(kpiUpdate, id);
      // TODO: validate updated KPI
      this.kpiService.update(newK);
      return new ResponseEntity<Void>(HttpStatus.OK);
    }
    return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
  }

  @ApiOperation(value = "delete existing KPI.")
  @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
  public @ResponseBody ResponseEntity<?> deleteKpi(@PathVariable Integer id) throws Exception {
    if (null != kpiService.findOne(id)) {
      kpiService.delete(id);
      return new ResponseEntity<Void>(HttpStatus.OK);
    }
    return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
  }
  
}