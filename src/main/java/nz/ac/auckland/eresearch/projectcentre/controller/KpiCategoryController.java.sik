package nz.ac.auckland.eresearch.projectcentre.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import nz.ac.auckland.eresearch.projectcentre.service.KpiCategoryService;
import nz.ac.auckland.eresearch.projectcentre.types.api.KpiCategoryGET;
import nz.ac.auckland.eresearch.projectcentre.types.api.KpiCategoryPOST;
import nz.ac.auckland.eresearch.projectcentre.types.api.KpiCategoryPUT;
import nz.ac.auckland.eresearch.projectcentre.types.api.KpiGET;
import nz.ac.auckland.eresearch.projectcentre.types.convert.TypeConversionUtil;
import nz.ac.auckland.eresearch.projectcentre.types.entity.KpiCategory;
import nz.ac.auckland.eresearch.projectcentre.util.LocationUtil;

import org.apache.commons.beanutils.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Api(tags={"KpiCategory"}, description="Operations on KPI categories")
@RequestMapping(value = "/api/kpicategory")
public class KpiCategoryController {

  @Autowired
  private KpiCategoryService kpiCategoryService;
  @Autowired
  private TypeConversionUtil typeConversionUtil;
  @Autowired
  private LocationUtil locationUtil;
  
  @ApiOperation(value = "get list of KPI categories.")
  @RequestMapping(method = RequestMethod.GET)
  public @ResponseBody ResponseEntity<List<KpiCategoryGET>> getAll() throws Exception {
    List<KpiCategoryGET> kpiCategoriesOut = new LinkedList<KpiCategoryGET>();
    for (KpiCategory kc : kpiCategoryService.findAll()) {
      kpiCategoriesOut.add(typeConversionUtil.createKpiCategoryGET(kc));
    }
    return new ResponseEntity<List<KpiCategoryGET>>(kpiCategoriesOut, HttpStatus.OK);
  }

  @ApiOperation(value = "create new KPI category.")
  @RequestMapping(method = RequestMethod.POST)
  public @ResponseBody ResponseEntity<Void> post(@RequestBody KpiCategoryPOST newKpiCategory,
      HttpServletRequest request) throws Exception {
    // TODO: validate
    KpiCategory kc = typeConversionUtil.createKpiCategory(newKpiCategory);
    Integer categoryId = this.kpiCategoryService.create(kc).getId();
    HttpHeaders headers = new HttpHeaders();
    headers.setLocation(locationUtil.createLocation(request, categoryId));
    return new ResponseEntity<Void>(headers, HttpStatus.CREATED);
  }

  @ApiOperation(value = "get existing KPI category.")
  @RequestMapping(value = "/{id}", method = RequestMethod.GET)
  public @ResponseBody ResponseEntity<KpiGET> get(@PathVariable Integer id) throws Exception {
    KpiCategory kc = kpiCategoryService.findOne(id);
    if (kc == null) {
      return new ResponseEntity(HttpStatus.NOT_FOUND);
    } 
    return new ResponseEntity(typeConversionUtil.createKpiCategoryGET(kc), HttpStatus.OK);
  }

  @ApiOperation(value = "patch existing KPI category. same fields like in PUT can be updated.")
  @RequestMapping(value = "/{id}", method = RequestMethod.PATCH)
  public @ResponseBody ResponseEntity<?> patchKpi(@PathVariable Integer id,
      @RequestBody HashMap<String, Object> parameterMap) throws Exception {
    // potentially cached, so overwrite in new instance
    KpiCategory oldKc = this.kpiCategoryService.findOne(id);
    if (oldKc != null) {
      KpiCategoryPUT newKcp = typeConversionUtil.createKpiCategoryPUT(oldKc);
      BeanUtils.populate(newKcp, parameterMap);
      KpiCategory newKc = typeConversionUtil.createKpiCategory(newKcp, id);
      // TODO: validate patched KPI category
      this.kpiCategoryService.update(newKc);
      return new ResponseEntity<Void>(HttpStatus.OK);
    }
    return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
  }

  @ApiOperation(value = "update existing KPI category.")
  @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
  public @ResponseBody ResponseEntity<?> put(@PathVariable Integer id,
      @RequestBody KpiCategoryPUT kpiCategoryUpdate) throws Exception {
    // potentially cached, so overwrite in new instance
    if (null != this.kpiCategoryService.findOne(id)) {
      KpiCategory newKc = typeConversionUtil.createKpiCategory(kpiCategoryUpdate, id);
      // TODO: validate updated KPI
      this.kpiCategoryService.update(newKc);
      return new ResponseEntity<Void>(HttpStatus.OK);
    }
    return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
  }

  @ApiOperation(value = "delete existing KPI category.")
  @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
  public @ResponseBody ResponseEntity<?> deleteKpi(@PathVariable Integer id) throws Exception {
    if (null != kpiCategoryService.findOne(id)) {
      kpiCategoryService.delete(id);
      return new ResponseEntity<Void>(HttpStatus.OK);
    }
    return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
  }
  
}